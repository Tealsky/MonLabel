// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ben.monlabel.web;

import com.ben.monlabel.domain.Etat;
import com.ben.monlabel.domain.Finitude;
import com.ben.monlabel.domain.Musique;
import com.ben.monlabel.domain.MusiqueVersion;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MusiqueController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public java.lang.String MusiqueController.create(@Valid Musique musique, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("musique", musique);
            return "musiques/create";
        }
        uiModel.asMap().clear();
        musique.persist();
        return "redirect:/musiques/" + encodeUrlPathSegment(musique.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public java.lang.String MusiqueController.createForm(Model uiModel) {
        uiModel.addAttribute("musique", new Musique());
        return "musiques/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public java.lang.String MusiqueController.show(@PathVariable("id") java.lang.Long id, Model uiModel) {
        uiModel.addAttribute("musique", Musique.findMusique(id));
        uiModel.addAttribute("itemId", id);
        return "musiques/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public java.lang.String MusiqueController.list(@RequestParam(value = "page", required = false) java.lang.Integer page, @RequestParam(value = "size", required = false) java.lang.Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("musiques", Musique.findMusiqueEntries(firstResult, sizeNo));
            float nrOfPages = (float) Musique.countMusiques() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("musiques", Musique.findAllMusiques());
        }
        return "musiques/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public java.lang.String MusiqueController.update(@Valid Musique musique, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("musique", musique);
            return "musiques/update";
        }
        uiModel.asMap().clear();
        musique.merge();
        return "redirect:/musiques/" + encodeUrlPathSegment(musique.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public java.lang.String MusiqueController.updateForm(@PathVariable("id") java.lang.Long id, Model uiModel) {
        uiModel.addAttribute("musique", Musique.findMusique(id));
        return "musiques/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public java.lang.String MusiqueController.delete(@PathVariable("id") java.lang.Long id, @RequestParam(value = "page", required = false) java.lang.Integer page, @RequestParam(value = "size", required = false) java.lang.Integer size, Model uiModel) {
        Musique musique = Musique.findMusique(id);
        musique.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/musiques";
    }
    
    @ModelAttribute("etats")
    public Collection<Etat> MusiqueController.populateEtats() {
        return Arrays.asList(Etat.class.getEnumConstants());
    }
    
    @ModelAttribute("finitudes")
    public Collection<Finitude> MusiqueController.populateFinitudes() {
        return Arrays.asList(Finitude.class.getEnumConstants());
    }
    
    @ModelAttribute("musiques")
    public Collection<Musique> MusiqueController.populateMusiques() {
        return Musique.findAllMusiques();
    }
    
    @ModelAttribute("musiqueversions")
    public Collection<MusiqueVersion> MusiqueController.populateMusiqueVersions() {
        return MusiqueVersion.findAllMusiqueVersions();
    }
    
    java.lang.String MusiqueController.encodeUrlPathSegment(java.lang.String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
